#tennis.csv
Day,Outlook,Temperature,Humidity,Wind,PlayTennis
D1,Sunny,High,High,Weak,No
D2,Sunny,High,High,Strong,No
D3,Overcast,High,High,Weak,Yes
D4,Rain,High,High,Weak,Yes
D5,Rain,Normal,Normal,Weak,Yes
D6,Rain,Normal,Normal,Strong,No
D7,Overcast,Normal,Normal,Weak,Yes
D8,Sunny,High,High,Weak,No
D9,Sunny,Normal,Normal,Weak,Yes
D10,Rain,Normal,Normal,Strong,Yes
D11,Sunny,Normal,Normal,Strong,Yes
D12,Overcast,High,High,Strong,Yes
D13,Overcast,Normal,Normal,Weak,Yes
D14,Rain,High,High,Strong,No


import pandas as pd;
from pandas import DataFrame
df_tennis = pd.read_csv('tennis.csv')
print(df_tennis)

#OUTPUT
    Day   Outlook Temperature Humidity    Wind PlayTennis
0    D1     Sunny        High     High    Weak         No
1    D2     Sunny        High     High  Strong         No
2    D3  Overcast        High     High    Weak        Yes
3    D4      Rain        High     High    Weak        Yes
4    D5      Rain      Normal   Normal    Weak        Yes
5    D6      Rain      Normal   Normal  Strong         No
6    D7  Overcast      Normal   Normal    Weak        Yes
7    D8     Sunny        High     High    Weak         No
8    D9     Sunny      Normal   Normal    Weak        Yes
9   D10      Rain      Normal   Normal  Strong        Yes
10  D11     Sunny      Normal   Normal  Strong        Yes
11  D12  Overcast        High     High  Strong        Yes
12  D13  Overcast      Normal   Normal    Weak        Yes
13  D14      Rain        High     High  Strong         No

attribute_names = list(df_tennis.columns)
attribute_names.remove('Day')
attribute_names.remove('PlayTennis')
attribute_names

#output
['Outlook', 'Temperature', 'Humidity', 'Wind']

def entropy_of_list(lst):
    from collections import Counter
    count = Counter(x for x in lst)
    num_instances = len(lst)*1
    probs = [x/num_instances for x in count.values()]
    return entropy(probs)

def entropy(probs):
    import math
    return sum([-prob*math.log(prob,2) for prob in probs])

total_entropy = entropy_of_list(df_tennis['PlayTennis'])

total_entropy
0.9402859586706309

def information_gain(df,split_attribute_name,target_attribute_name,trace=0):
    df_split = df.groupby(split_attribute_name)
    nobs=len(df.index)*1
    df_agg_ent=df_split.agg({target_attribute_name:[entropy_of_list,lambda x:len(x)/nobs]})
    df_agg_ent.columns=['Entropy','probs']
    new_entropy=sum(df_agg_ent['Entropy'] * df_agg_ent['probs'])
    old_entropy = entropy_of_list(df[target_attribute_name])
    print(split_attribute_name,'IG :',old_entropy - new_entropy)
    return old_entropy - new_entropy

def id3(df, target_attribute_name, attribute_names, default_class=None):
    from collections import Counter
    count = Counter(x for x in df[target_attribute_name])
    if len(count) == 1:
        return next(iter(count))
    elif df.empty or (not attribute_names):
        return default_class
    else:
        default_class = max(count.keys())
        gain = [
            information_gain(df, attr, target_attribute_name) for attr in attribute_names
        ]
        print()
        index_of_max= gain.index(max(gain))
        best_attr=attribute_names[index_of_max]
        
        tree = {best_attr: {}}
        remaining_attribute_names = [i for i in attribute_names if i!=best_attr ] 
        for attr_val , data_subset in df.groupby(best_attr):
            subtree=id3(data_subset,target_attribute_name, remaining_attribute_names, default_class)
            tree[best_attr][attr_val]=subtree
        return tree


#Output
Outlook IG : 0.2467498197744391
Temperature IG : 0.15183550136234136
Humidity IG : 0.15183550136234136
Wind IG : 0.04812703040826927

Temperature IG : 0.01997309402197489
Humidity IG : 0.01997309402197489
Wind IG : 0.4199730940219749

Temperature IG : 0.2516291673878229
Humidity IG : 0.2516291673878229

Humidity IG : 0.0

Temperature IG : 0.9709505944546686
Humidity IG : 0.9709505944546686
Wind IG : 0.01997309402197489


The Result Decision Tree is:

{'Outlook': {'Overcast': 'Yes',
             'Rain': {'Wind': {'Strong': {'Temperature': {'High': 'No',
                                                          'Normal': {'Humidity': {'Normal': 'Yes'}}}},
                               'Weak': 'Yes'}},
             'Sunny': {'Temperature': {'High': 'No', 'Normal': 'Yes'}}}}
